---
import { getPagePath } from '../../utils/paths.js';

interface Props {
  title?: string;
  subtitle?: string;
  showSubject?: boolean;
  defaultSubject?: string;
  submitText?: string;
  class?: string;
}

const { 
  title = "Send Us a Message",
  subtitle = "We'd love to hear from you. Send us a message and we'll respond as soon as possible.",
  showSubject = true,
  defaultSubject = "",
  submitText = "Send Message",
  class: className = ""
} = Astro.props;
---

<div class={`contact-form ${className}`}>
  <div class="mb-6">
    <h3 class="text-2xl font-bold text-gray-900 mb-2">{title}</h3>
    <p class="text-gray-600">{subtitle}</p>
  </div>
  
  <form class="space-y-6" id="contact-form">
    <!-- Success/Error Messages -->
    <div id="form-messages" class="hidden">
      <div id="success-message" class="hidden bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded-lg">
        <div class="flex items-center">
          <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
          </svg>
          <span>Thank you! Your message has been sent successfully.</span>
        </div>
      </div>
      <div id="error-message" class="hidden bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg">
        <div class="flex items-center">
          <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>
          </svg>
          <span id="error-text">There was an error sending your message. Please try again.</span>
        </div>
      </div>
    </div>

    <div class="grid md:grid-cols-2 gap-4">
      <div>
        <label for="firstName" class="block text-sm font-medium text-gray-700 mb-2">
          First Name *
        </label>
        <input 
          type="text" 
          id="firstName" 
          name="firstName" 
          required 
          class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors"
          placeholder="Your first name"
        />
        <div class="error-message hidden text-red-600 text-sm mt-1"></div>
      </div>
      <div>
        <label for="lastName" class="block text-sm font-medium text-gray-700 mb-2">
          Last Name *
        </label>
        <input 
          type="text" 
          id="lastName" 
          name="lastName" 
          required
          class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors"
          placeholder="Your last name"
        />
        <div class="error-message hidden text-red-600 text-sm mt-1"></div>
      </div>
    </div>

    <div>
      <label for="email" class="block text-sm font-medium text-gray-700 mb-2">
        Email Address *
      </label>
      <input 
        type="email" 
        id="email" 
        name="email" 
        required
        class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors"
        placeholder="your.email@example.com"
      />
      <div class="error-message hidden text-red-600 text-sm mt-1"></div>
    </div>

    <div>
      <label for="phone" class="block text-sm font-medium text-gray-700 mb-2">
        Phone Number
      </label>
      <input 
        type="tel" 
        id="phone" 
        name="phone"
        class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors"
        placeholder="(555) 123-4567"
      />
      <div class="error-message hidden text-red-600 text-sm mt-1"></div>
    </div>

    {showSubject && (
      <div>
        <label for="subject" class="block text-sm font-medium text-gray-700 mb-2">
          Subject *
        </label>
        <select 
          id="subject" 
          name="subject" 
          required
          class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors"
        >
          <option value="">Select a topic</option>
          <option value="general" selected={defaultSubject === "general"}>General Question</option>
          <option value="visit" selected={defaultSubject === "visit"}>Planning a Visit</option>
          <option value="membership" selected={defaultSubject === "membership"}>Membership Information</option>
          <option value="baptism" selected={defaultSubject === "baptism"}>Baptism</option>
          <option value="wedding" selected={defaultSubject === "wedding"}>Wedding</option>
          <option value="funeral" selected={defaultSubject === "funeral"}>Funeral Services</option>
          <option value="pastoral-care" selected={defaultSubject === "pastoral-care"}>Pastoral Care</option>
          <option value="volunteer" selected={defaultSubject === "volunteer"}>Volunteer Opportunities</option>
          <option value="prayer-request" selected={defaultSubject === "prayer-request"}>Prayer Request</option>
          <option value="other" selected={defaultSubject === "other"}>Other</option>
        </select>
        <div class="error-message hidden text-red-600 text-sm mt-1"></div>
      </div>
    )}

    <div>
      <label for="message" class="block text-sm font-medium text-gray-700 mb-2">
        Message *
      </label>
      <textarea 
        id="message" 
        name="message" 
        rows="5" 
        required
        placeholder="Please share your question or how we can help you..."
        class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors resize-vertical"
      ></textarea>
      <div class="error-message hidden text-red-600 text-sm mt-1"></div>
    </div>

    <div class="flex items-start">
      <input 
        type="checkbox" 
        id="newsletter" 
        name="newsletter" 
        class="mt-1 h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"
      />
      <label for="newsletter" class="ml-3 text-sm text-gray-600">
        I'd like to receive occasional updates about church events and activities
      </label>
    </div>

    <div class="flex items-start">
      <input 
        type="checkbox" 
        id="privacy" 
        name="privacy" 
        required
        class="mt-1 h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"
      />
      <label for="privacy" class="ml-3 text-sm text-gray-600">
        I agree to the <a href={getPagePath("/privacy")} class="text-primary-600 hover:text-primary-700 underline">privacy policy</a> and understand my information will be used to respond to my inquiry. *
      </label>
      <div class="error-message hidden text-red-600 text-sm mt-1 ml-7"></div>
    </div>

    <button 
      type="submit" 
      class="w-full bg-primary-600 hover:bg-primary-700 text-white font-medium py-3 px-6 rounded-lg transition-colors focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed"
      id="submit-button"
    >
      <span id="submit-text">{submitText}</span>
      <span id="loading-text" class="hidden">Sending...</span>
    </button>
  </form>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const form = document.getElementById('contact-form');
  const submitButton = document.getElementById('submit-button');
  const submitText = document.getElementById('submit-text');
  const loadingText = document.getElementById('loading-text');
  const formMessages = document.getElementById('form-messages');
  const successMessage = document.getElementById('success-message');
  const errorMessage = document.getElementById('error-message');
  const errorText = document.getElementById('error-text');

  // Real-time validation
  const inputs = form.querySelectorAll('input[required], select[required], textarea[required]');
  inputs.forEach(input => {
    input.addEventListener('blur', validateField);
    input.addEventListener('input', clearFieldError);
  });

  function validateField(e) {
    const field = e.target;
    const errorDiv = field.parentNode.querySelector('.error-message');
    
    if (!field.value.trim()) {
      showFieldError(field, errorDiv, 'This field is required');
      return false;
    }

    if (field.type === 'email' && !isValidEmail(field.value)) {
      showFieldError(field, errorDiv, 'Please enter a valid email address');
      return false;
    }

    clearFieldError(field, errorDiv);
    return true;
  }

  function showFieldError(field, errorDiv, message) {
    field.classList.add('border-red-500', 'focus:border-red-500', 'focus:ring-red-500');
    field.classList.remove('border-gray-300', 'focus:border-primary-500', 'focus:ring-primary-500');
    errorDiv.textContent = message;
    errorDiv.classList.remove('hidden');
  }

  function clearFieldError(field, errorDiv) {
    field.classList.remove('border-red-500', 'focus:border-red-500', 'focus:ring-red-500');
    field.classList.add('border-gray-300', 'focus:border-primary-500', 'focus:ring-primary-500');
    if (errorDiv) {
      errorDiv.classList.add('hidden');
    }
  }

  function isValidEmail(email) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  }

  // Form submission
  form.addEventListener('submit', async function(e) {
    e.preventDefault();
    
    // Validate all fields
    let isValid = true;
    inputs.forEach(input => {
      if (!validateField({ target: input })) {
        isValid = false;
      }
    });

    // Check privacy checkbox
    const privacyCheckbox = document.getElementById('privacy');
    const privacyError = privacyCheckbox.parentNode.querySelector('.error-message');
    if (!privacyCheckbox.checked) {
      showFieldError(privacyCheckbox, privacyError, 'You must agree to the privacy policy');
      isValid = false;
    } else {
      clearFieldError(privacyCheckbox, privacyError);
    }

    if (!isValid) {
      return;
    }

    // Show loading state
    submitButton.disabled = true;
    submitText.classList.add('hidden');
    loadingText.classList.remove('hidden');

    // Simulate form submission
    try {
      const formData = new FormData(form);
      const data = Object.fromEntries(formData);
      
      // TODO: Replace with actual form submission endpoint
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Show success message
      formMessages.classList.remove('hidden');
      successMessage.classList.remove('hidden');
      errorMessage.classList.add('hidden');
      
      // Reset form
      form.reset();
      
    } catch (error) {
      // Show error message
      formMessages.classList.remove('hidden');
      errorMessage.classList.remove('hidden');
      successMessage.classList.add('hidden');
      errorText.textContent = 'There was an error sending your message. Please try again.';
    } finally {
      // Reset button state
      submitButton.disabled = false;
      submitText.classList.remove('hidden');
      loadingText.classList.add('hidden');
    }
  });
});
</script> 