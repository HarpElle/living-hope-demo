---
import { getPagePath } from '../../utils/paths.js';

interface Props {
  title?: string;
  description?: string;
  variant?: 'default' | 'compact' | 'inline';
  theme?: 'light' | 'dark';
  class?: string;
}

const { 
  title = "Stay Connected",
  description = "Get updates about church events, sermons, and community news.",
  variant = 'default',
  theme = 'light',
  class: className = ""
} = Astro.props;

// Theme-based color classes
const themeClasses = {
  light: {
    title: 'text-gray-900',
    description: 'text-gray-600',
    label: 'text-gray-700',
    checkboxLabel: 'text-gray-600',
    privacy: 'text-gray-500',
    privacyLink: 'text-primary-600 hover:text-primary-700'
  },
  dark: {
    title: 'text-white',
    description: 'text-primary-100',
    label: 'text-primary-100',
    checkboxLabel: 'text-primary-200',
    privacy: 'text-primary-300',
    privacyLink: 'text-accent-gold hover:text-white'
  }
};
---

<div class={`newsletter-signup ${className}`}>
  {variant === 'default' && (
    <div class="text-center mb-6">
      <h3 class={`text-2xl font-bold mb-2 ${themeClasses[theme].title}`}>{title}</h3>
      <p class={themeClasses[theme].description}>{description}</p>
    </div>
  )}
  
  {variant === 'compact' && (
    <div class="mb-4">
      <h4 class={`text-lg font-semibold mb-1 ${themeClasses[theme].title}`}>{title}</h4>
      <p class={`text-sm ${themeClasses[theme].description}`}>{description}</p>
    </div>
  )}
  
  <form class={`newsletter-form ${variant === 'inline' ? 'flex gap-2' : 'space-y-4'}`} id="newsletter-form">
    <!-- Success/Error Messages -->
    <div id="newsletter-messages" class="hidden w-full">
      <div id="newsletter-success" class="hidden bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded-lg mb-4">
        <div class="flex items-center">
          <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
          </svg>
          <span>Thank you! You've been subscribed to our newsletter.</span>
        </div>
      </div>
      <div id="newsletter-error" class="hidden bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg mb-4">
        <div class="flex items-center">
          <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>
          </svg>
          <span>There was an error subscribing you to our newsletter. Please try again.</span>
        </div>
      </div>
    </div>

    <div class={variant === 'inline' ? 'flex-1' : 'w-full'}>
      {variant === 'inline' && (
        <label for="newsletter-email" class="sr-only">Email address</label>
      )}
      {variant !== 'inline' && (
        <label for="newsletter-email" class={`block text-sm font-medium mb-2 ${themeClasses[theme].label}`}>
          Email Address
        </label>
      )}
      <input 
        type="email" 
        id="newsletter-email" 
        name="email" 
        required
        placeholder={variant === 'inline' ? 'Enter your email' : 'your.email@example.com'}
        class={`w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors ${variant === 'inline' ? 'text-sm' : ''}`}
      >
      <div class="newsletter-email-error hidden text-red-600 text-sm mt-1"></div>
    </div>

    {variant !== 'inline' && (
      <div class="space-y-3">
        <label class={`block text-sm font-medium ${themeClasses[theme].label}`}>
          What would you like to receive? (optional)
        </label>
        <div class="flex justify-center">
          <div class="space-y-2 text-left">
            <div class="flex items-center">
              <input 
                type="checkbox" 
                id="events" 
                name="interests" 
                value="events"
                class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"
                checked
              >
              <label for="events" class={`ml-2 text-sm ${themeClasses[theme].checkboxLabel}`}>
                Church events and activities
              </label>
            </div>
            <div class="flex items-center">
              <input 
                type="checkbox" 
                id="sermons" 
                name="interests" 
                value="sermons"
                class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"
                checked
              >
              <label for="sermons" class={`ml-2 text-sm ${themeClasses[theme].checkboxLabel}`}>
                New sermons and Bible studies
              </label>
            </div>
            <div class="flex items-center">
              <input 
                type="checkbox" 
                id="volunteer" 
                name="interests" 
                value="volunteer"
                class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"
              >
              <label for="volunteer" class={`ml-2 text-sm ${themeClasses[theme].checkboxLabel}`}>
                Volunteer opportunities
              </label>
            </div>
            <div class="flex items-center">
              <input 
                type="checkbox" 
                id="prayer" 
                name="interests" 
                value="prayer"
                class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"
              >
              <label for="prayer" class={`ml-2 text-sm ${themeClasses[theme].checkboxLabel}`}>
                Prayer requests and updates
              </label>
            </div>
          </div>
        </div>
      </div>
    )}

    <button 
      type="submit" 
      class={`bg-primary-600 hover:bg-primary-700 text-white font-medium rounded-lg transition-colors focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed ${
        variant === 'inline' 
          ? 'px-4 py-3 text-sm whitespace-nowrap' 
          : 'w-full py-3 px-6'
      }`}
      id="newsletter-submit"
    >
      <span id="newsletter-submit-text">
        {variant === 'inline' ? 'Subscribe' : 'Subscribe to Newsletter'}
      </span>
      <span id="newsletter-loading" class="hidden">
        {variant === 'inline' ? 'Subscribing...' : 'Subscribing...'}
      </span>
    </button>
  </form>

  {variant !== 'inline' && (
    <p class={`text-xs mt-4 text-center ${themeClasses[theme].privacy}`}>
      We respect your privacy. Unsubscribe at any time. 
                      <a href={getPagePath("/privacy")} class={`underline ${themeClasses[theme].privacyLink}`}>Privacy Policy</a>
    </p>
  )}
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const forms = document.querySelectorAll('.newsletter-form');
    
    forms.forEach(form => {
      const submitButton = form.querySelector('#newsletter-submit');
      const submitText = form.querySelector('#newsletter-submit-text');
      const loadingText = form.querySelector('#newsletter-loading');
      const messages = form.parentNode.querySelector('#newsletter-messages');
      const successMessage = form.parentNode.querySelector('#newsletter-success');
      const errorMessage = form.parentNode.querySelector('#newsletter-error');
      const emailInput = form.querySelector('#newsletter-email');
      const emailError = form.querySelector('.newsletter-email-error');

      // Email validation
      emailInput.addEventListener('blur', function() {
        validateEmail();
      });

      emailInput.addEventListener('input', function() {
        clearEmailError();
      });

      function validateEmail() {
        const email = emailInput.value.trim();
        if (!email) {
          showEmailError('Email address is required');
          return false;
        }
        if (!isValidEmail(email)) {
          showEmailError('Please enter a valid email address');
          return false;
        }
        clearEmailError();
        return true;
      }

      function showEmailError(message) {
        emailInput.classList.add('border-red-500', 'focus:border-red-500', 'focus:ring-red-500');
        emailInput.classList.remove('border-gray-300', 'focus:border-primary-500', 'focus:ring-primary-500');
        emailError.textContent = message;
        emailError.classList.remove('hidden');
      }

      function clearEmailError() {
        emailInput.classList.remove('border-red-500', 'focus:border-red-500', 'focus:ring-red-500');
        emailInput.classList.add('border-gray-300', 'focus:border-primary-500', 'focus:ring-primary-500');
        emailError.classList.add('hidden');
      }

      function isValidEmail(email) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return emailRegex.test(email);
      }

      // Form submission
      form.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        if (!validateEmail()) {
          return;
        }

        // Show loading state
        submitButton.disabled = true;
        submitText.classList.add('hidden');
        loadingText.classList.remove('hidden');

        try {
          // Simulate API call
          await new Promise(resolve => setTimeout(resolve, 1500));
          
          // Show success message
          messages.classList.remove('hidden');
          successMessage.classList.remove('hidden');
          errorMessage.classList.add('hidden');
          
          // Reset form
          form.reset();
          
          // Scroll to success message if not inline
          if (!form.classList.contains('flex')) {
            messages.scrollIntoView({ behavior: 'smooth', block: 'center' });
          }
          
        } catch (error) {
          // Show error message
          messages.classList.remove('hidden');
          errorMessage.classList.remove('hidden');
          successMessage.classList.add('hidden');
        } finally {
          // Reset button state
          submitButton.disabled = false;
          submitText.classList.remove('hidden');
          loadingText.classList.add('hidden');
        }
      });
    });
  });
</script> 