---
import { getCollection } from 'astro:content';
import PageLayout from '../../layouts/PageLayout.astro';
import Card from '../../components/ui/Card.astro';
import Button from '../../components/ui/Button.astro';
import Breadcrumbs from '../../components/navigation/Breadcrumbs.astro';
import RelatedContent from '../../components/navigation/RelatedContent.astro';
import { getPagePath } from '../../utils/paths.js';

export async function getStaticPaths() {
  const events = await getCollection('events');
  return events.map((event) => ({
    params: { slug: event.slug },
    props: { event },
  }));
}

const { event } = Astro.props;
const { Content } = await event.render();

// Get related events (same category)
const allEvents = await getCollection('events');
const relatedEvents = allEvents
  .filter(e => e.slug !== event.slug && e.data.category === event.data.category)
  .slice(0, 3);

// Prepare breadcrumb items
const breadcrumbItems = [
  { label: 'Connect', href: '/connect' },
  { label: 'Events', href: '/events' },
  { label: event.data.title, current: true }
];

// Prepare related content for RelatedContent component
const relatedContentItems = relatedEvents.map(e => ({
  title: e.data.title,
  description: e.data.description,
  href: `/events/${e.slug}`,
  type: 'event' as const,
  date: e.data.date.toISOString()
}));

// Category display names
const categoryNames = {
  'worship': 'Worship',
  'fellowship': 'Fellowship',
  'education': 'Education',
  'service': 'Service',
  'special': 'Special Event'
};

// Category icons
const getCategoryIcon = (category) => {
  switch (category) {
    case 'worship':
      return `<svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19V6l12-3v13M9 19c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zm12-3c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zM9 10l12-3"></path>
      </svg>`;
    case 'fellowship':
      return `<svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z"></path>
      </svg>`;
    case 'education':
      return `<svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"></path>
      </svg>`;
    case 'service':
      return `<svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path>
      </svg>`;
    case 'special':
      return `<svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z"></path>
      </svg>`;
    default:
      return `<svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
      </svg>`;
  }
};

// Format date and time
const formatDate = (date) => {
  return new Date(date).toLocaleDateString('en-US', { 
    weekday: 'long',
    year: 'numeric', 
    month: 'long', 
    day: 'numeric' 
  });
};

const formatTime = (timeString) => {
  // Handle various time formats
  return timeString;
};

// Check if event is upcoming
const isUpcoming = new Date(event.data.date) >= new Date();
---

<PageLayout 
  title={`${event.data.title} - Living Hope Lutheran Church`}
  description={`Join us for ${event.data.title} at Living Hope Lutheran Church. ${event.data.description}`}
>
  <!-- Breadcrumbs -->
  <section class="py-4 bg-gray-50">
    <div class="container mx-auto px-4">
      <Breadcrumbs items={breadcrumbItems} />
    </div>
  </section>

  <!-- Hero Section -->
  <section class="pt-32 pb-16 bg-gradient-to-br from-secondary-600 to-secondary-800 text-white">
    <div class="container mx-auto px-4">
      <div class="max-w-4xl mx-auto">
        <div class="mb-6">
          <div class="flex items-center flex-wrap gap-3">
            <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-white/20 text-white">
              <span class="mr-2" set:html={getCategoryIcon(event.data.category)}></span>
              {categoryNames[event.data.category]}
            </span>
            {event.data.featured && (
              <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-accent-gold text-white">
                Featured
              </span>
            )}
            {isUpcoming && (
              <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-500 text-white">
                Upcoming
              </span>
            )}
            {event.data.recurring && (
              <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-500 text-white">
                Recurring
              </span>
            )}
          </div>
        </div>
        <h1 class="text-4xl md:text-6xl font-bold mb-6">
          {event.data.title}
        </h1>
        <p class="text-xl text-secondary-100 mb-8">
          {event.data.description}
        </p>
        
        <!-- Event Details -->
        <div class="grid sm:grid-cols-2 lg:grid-cols-3 gap-4 text-secondary-200">
          <div class="flex items-center">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
            </svg>
            <div>
              <p class="text-xs text-secondary-300">Date</p>
              <p class="font-medium">{formatDate(event.data.date)}</p>
            </div>
          </div>
          <div class="flex items-center">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            <div>
              <p class="text-xs text-secondary-300">Time</p>
              <p class="font-medium">{formatTime(event.data.time)}</p>
            </div>
          </div>
          <div class="flex items-center">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
            </svg>
            <div>
              <p class="text-xs text-secondary-300">Location</p>
              <p class="font-medium">{event.data.location}</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- Event Content -->
  <section class="py-16 bg-white">
    <div class="container mx-auto px-4">
      <div class="max-w-4xl mx-auto">
        <div class="grid lg:grid-cols-3 gap-12">
          
          <!-- Event Info Sidebar -->
          <div class="lg:col-span-1">
            <Card variant="elevated" class="sticky top-24">
              <div class="p-6">
                <h3 class="text-lg font-bold text-gray-900 mb-4">Event Details</h3>
                
                <!-- Event Info -->
                <div class="space-y-4 mb-6">
                  <div>
                    <p class="text-sm font-medium text-gray-500 mb-1">Category</p>
                    <div class="flex items-center">
                      <span class="mr-2" set:html={getCategoryIcon(event.data.category)}></span>
                      <span class="text-gray-900">{categoryNames[event.data.category]}</span>
                    </div>
                  </div>
                  
                  <div>
                    <p class="text-sm font-medium text-gray-500 mb-1">Date & Time</p>
                    <p class="text-gray-900">{formatDate(event.data.date)}</p>
                    <p class="text-gray-900">{formatTime(event.data.time)}</p>
                    {event.data.endDate && (
                      <p class="text-sm text-gray-600">Ends: {formatDate(event.data.endDate)}</p>
                    )}
                  </div>
                  
                  <div>
                    <p class="text-sm font-medium text-gray-500 mb-1">Location</p>
                    <p class="text-gray-900">{event.data.location}</p>
                  </div>
                  
                  {event.data.contact && (
                    <div>
                      <p class="text-sm font-medium text-gray-500 mb-1">Contact</p>
                      <p class="text-gray-900">{event.data.contact}</p>
                    </div>
                  )}
                </div>
                
                <!-- Action Buttons -->
                <div class="space-y-3">
                  {event.data.registrationRequired && event.data.registrationUrl ? (
                    <Button href={event.data.registrationUrl} variant="primary" size="sm" class="w-full" target="_blank">
                      Register Now
                    </Button>
                  ) : event.data.contact ? (
                    <Button href={`mailto:${event.data.contact}`} variant="primary" size="sm" class="w-full">
                      Contact for Info
                    </Button>
                  ) : (
                    <Button href={getPagePath("/contact")} variant="primary" size="sm" class="w-full">
                      Get More Info
                    </Button>
                  )}
                  
                  <!-- Add to Calendar -->
                  <Button 
                    href={`data:text/calendar;charset=utf8,BEGIN:VCALENDAR
VERSION:2.0
BEGIN:VEVENT
DTSTART:${event.data.date.toISOString().replace(/[-:]/g, '').split('.')[0]}Z
SUMMARY:${event.data.title}
DESCRIPTION:${event.data.description}
LOCATION:${event.data.location}
END:VEVENT
END:VCALENDAR`}
                    variant="secondary" 
                    size="sm" 
                    class="w-full"
                    download={`${event.data.title.replace(/\s+/g, '-')}.ics`}
                  >
                    Add to Calendar
                  </Button>
                </div>
                
                <!-- Back to Events -->
                <div class="mt-6 pt-6 border-t border-gray-200">
                  <Button href={getPagePath("/events")} variant="outline" size="sm" class="w-full">
                    ← All Events
                  </Button>
                </div>
              </div>
            </Card>
          </div>
          
          <!-- Main Content -->
          <div class="lg:col-span-2">
            <Card variant="elevated">
              <div class="p-8">
                <h2 class="text-2xl font-bold text-gray-900 mb-6">About This Event</h2>
                <div class="prose prose-lg max-w-none">
                  <Content />
                </div>
                
                {/* Registration Notice */}
                {event.data.registrationRequired && (
                  <div class="mt-8 p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
                    <div class="flex items-start">
                      <svg class="w-5 h-5 text-yellow-600 mt-0.5 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                      </svg>
                      <div>
                        <h4 class="text-sm font-medium text-yellow-800">Registration Required</h4>
                        <p class="text-sm text-yellow-700 mt-1">
                          Please register in advance to attend this event.
                        </p>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </Card>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- Related Events -->
  {relatedContentItems.length > 0 && (
    <section class="py-16 bg-gray-50">
      <div class="container mx-auto px-4">
        <div class="max-w-6xl mx-auto">
          <RelatedContent 
            title={`Other ${categoryNames[event.data.category]} Events`}
            items={relatedContentItems}
            maxItems={3}
            variant="grid"
          />
        </div>
      </div>
    </section>
  )}

  <!-- Get Involved CTA -->
  <section class="py-16 bg-secondary-600 text-white">
    <div class="container mx-auto px-4 text-center">
      <div class="max-w-3xl mx-auto">
        <h2 class="text-3xl font-bold mb-6">
          Join Our Community
        </h2>
        <p class="text-xl text-secondary-100 mb-8">
          Don't miss out on upcoming events and opportunities to connect with our church family.
        </p>
        <div class="flex flex-col sm:flex-row gap-4 justify-center">
          <Button href={getPagePath("/events")} variant="secondary" size="lg">
            View All Events
          </Button>
          <Button href={getPagePath("/connect/im-new")} variant="outline" size="lg">
            Plan Your Visit
          </Button>
        </div>
      </div>
    </div>
  </section>

</PageLayout> 